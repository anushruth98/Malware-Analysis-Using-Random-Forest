#!/usr/bin/env python
# coding: utf-8

# In[36]:


#importing the required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


# In[37]:


#Load the dataset from a CSV file located at the specified path.
data = pd.read_csv("C:/Users/MI/OneDrive/Desktop/Malware Analysis/data.csv")


# In[38]:


#Display the first few rows of the dataset to quickly inspect its structure and contents.
data.head()


# In[40]:


#Check for missing values (NaN or None) in the dataset. False if no null values present
data.isnull()


# In[41]:


#Calculate the sum of missing values in each column of the dataset.
data.isnull().sum()


# In[42]:


#Remove the 'Class' column from the dataset and assign the result to variable X.
X = data.drop('Class', axis=1)  # Features

#Extract the 'Class' column from the dataset and assign it to variable y.
# This creates a Series containing the target variable, which we aim to predict in machine learning tasks.
y = data['Class']  # Target variable


# In[43]:


#importing required libraries for building model
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split


# In[44]:


#Split the dataset into training and testing sets using the train_test_split function.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# In[45]:


#Initialize a Random Forest Classifier with 500 decision trees.
rf_classifier = RandomForestClassifier(n_estimators=500, random_state=42)


# In[47]:


#Train the Random Forest Classifier using the training data.
#This involves fitting the model to the features (X_train) and corresponding labels (y_train).
rf_classifier.fit(X_train, y_train)


# In[48]:


#Use the trained Random Forest Classifier to make predictions on the test data.
y_pred = rf_classifier.predict(X_test)


# In[49]:


#import the libraries for metrics
from sklearn.metrics import classification_report, accuracy_score, f1_score, confusion_matrix


# In[50]:


#Calculate the accuracy of the model by comparing the predicted labels (y_pred) with the true labels (y_test).
#The accuracy_score function computes the proportion of correctly classified instances.
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)


# In[51]:


#Calculate the weighted F1-score of the model.
#The F1-score is the harmonic mean of precision and recall, providing a balanced measure of the model's performance.
f1 = f1_score(y_test, y_pred, average='weighted')
print("F1-score:", f1)


# In[52]:


#Generate a classification report to evaluate the model's performance.
print(classification_report(y_test, y_pred))


# In[53]:


#Generate a confusion matrix to visualize the performance of the model.
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)


# In[ ]:




